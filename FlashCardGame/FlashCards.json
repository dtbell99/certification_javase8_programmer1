{
	"cards": [
		{
			"question": "Name some of the benefits of Java",
			"answer": "Object oriented, encapsulation, memory management (less prone to memory leaks), huge library, secure by design (jvm sandbox), write once run anywhere, strongly typed, multithreaded, distributed computing"
		},
		{
			"question": "These are valid identifiers true or false: $objectOne, 1$objectTwo, _Object3",
			"answer": "false, identifiers can begin with letter, currency character or connecting character like underscore, but not a digit"
		},
		{
			"question": "These are valid identifiers true or false: $ObjectOne, _ObjectTwo, someObject3, someOtherObject$$99",
			"answer": "true, identifiers can begin with letter, currency character or connecting character like underscore, but not a digit"
		},
		{
			"question": "Valid identifier? : int :b;",
			"answer": "false"
		},
		{
			"question": "Valid identifier? : int -d;",
			"answer": "false"
		},
		{
			"question": "Valid identifier: int e#;",
			"answer": "false"
		},
		{
<<<<<<< HEAD
			"q": "Valid identifier: int ______2_w;",
			"a": "True"
		},
		{
			"q": "Valid identifier? int $c;",
			"a": "True"
=======
			"question": "Valid identifier: int ______2_w;",
			"answer": "true"
		},
		{
			"question": "Valid identifier? int $c;",
			"answer": "true"
>>>>>>> 722b9c642a81a005ff2dc53a87bc205971dca255
		},
		{
			"question": "Valid identifier? int 2nbr;",
			"answer": "false"
		},
		{
<<<<<<< HEAD
			"q": "Valid keyword: default",
			"a": "True"
		},
		{
			"q": "Valid keyword: strictfp",
			"a": "True"
		},
		{
			"q": "T/F : There can be only one public class per source file?",
			"a": "True"
=======
			"question": "Valid keyword: default",
			"answer": "true"
		},
		{
			"question": "Valid keyword: strictfp",
			"answer": "true"
		},
		{
			"question": "T/F : There can be only one public class per source file?",
			"answer": "true"
>>>>>>> 722b9c642a81a005ff2dc53a87bc205971dca255
		},
		{
			"question": "T/F: Classes can be made private?",
			"answer": "false"
		},
		{
<<<<<<< HEAD
			"q": "if there is a public class does the file name have to match True/False",
			"a": "True"
		},
		{
			"q": "Files can contain multiple classes true/false",
			"a": "True"
		},
		{
			"q": "package name has to be first line if file is in a package t/f",
			"a": "True"
=======
			"question": "if there is a public class does the file name have to match True/False",
			"answer": "true"
		},
		{
			"question": "Files can contain multiple classes true/false",
			"answer": "true"
		},
		{
			"question": "package name has to be first line if file is in a package t/f",
			"answer": "true"
>>>>>>> 722b9c642a81a005ff2dc53a87bc205971dca255
		},
		{
			"question": "T/F Multiple classes in one file can have their own package and imports?",
			"answer": "false, each file can only have 1 unique package and set of imports"
		},
		{
<<<<<<< HEAD
			"q": "T/F main() can be overloaded?",
			"a": "True"
=======
			"question": "T/F main() can be overloaded?",
			"answer": "true"
>>>>>>> 722b9c642a81a005ff2dc53a87bc205971dca255
		},
		{
			"question": "java.util.* is valid?",
			"answer": "true, it allows all class in util to be used without specifying java.util.ClassName"
		},
		{
			"question": "This this a valid import line? static import java.lang.System.out;",
			"answer": "false, import must be first identifier"
		},
		{
			"question": "import java.* is valid?",
			"answer": "false"
		},
		{
			"question": "Name the access modifiers?",
			"answer": "public, protected, private"
		},
		{
			"question": "Name the access controls?",
			"answer": "default, public, private, protected"
		},
		{
			"question": "Name the non-access modifiers",
			"answer": "strictfp, final, abstract"
		},
		{
			"question": "Name the two access controls a class may use?",
			"answer": "default, public"
		},
		{
<<<<<<< HEAD
			"q": "T/F Default Access is the same as package level access?",
			"a": "True"
		},
		{
			"q": "T/F strictfp can be used with final?",
			"a": "True"
		},
		{
			"q": "T/F Classes can be both final and abstract",
			"a": "False, these are two separate concepts, abstract classes must be extended, final means you can not extend it"
		},
		{
			"q": "T/F strictfp is a keyword and can be used to modify a class and a method but never a variable",
			"a": "True"
		},
		{
			"q": "T/F A final keyword on a class means it can be subclassed?",
			"a": "False, final means it can NOT be subclassed."
		},
		{
			"q": "T/F An abstract class can never be instantiated?",
			"a": "True"
		},
		{
			"q": "Abstract classes can be executed.",
			"a": "True, they can have public static void main and it can execute with java AbstractClass"
		},
		{
			"q": "T/F Abstract can be applied to variables",
			"a": "False, abstract can apply to classes and methods only"
		},
		{
			"q": "T/F Abstract methods end in semicolon instead of curly brackets.",
			"a": "True"
		},
		{
			"q": "T/F An interface is considered a contract",
			"a": "True"
		},
		{
			"q": "T/F Abstract keyword must be applied to method signatures in the interface",
			"a": "False, they are presumed if not specified"
		},
		{
			"q": "T/F Interfaces can have private methods",
			"a": "False, methods must be public only"
		},
		{
			"q": "T/F Inteface methods are implicitly public and abstract?",
			"a": "True"
		},
		{
			"q": "T/F Interfaces can only declare constants aka public static final and not instance variables.",
			"a": "True; you can not create instance style variables in an interface."
		},
		{
			"q": "T/F Interface methods can not be marked final, strictfp, or native",
			"a": "True"
		},
		{
			"q": "T/F An interface can extend one or more other interfaces",
			"a": "True; it just can not anything else and cant implement another interface or class."
		},
		{
			"q": "T/F public abstract interface Rollable() is redundant?",
			"a": "True; abstract is assumed and not necessary in signature. public is required if you dont want it to have default access"
		},
		{
			"q": "Valid Interface method? abstract public void bounce();",
			"a": "Yes"
		},
		{
			"q": "Valid Interface method? public abstract void bounce();",
			"a": "Yes"
		},
		{
			"q": "Valid Interface method? abstract void bounce();",
			"a": "Yes"
		},
		{
			"q": "Valid Interface method? public void bounce();",
			"a": "Yes"
		},
		{
			"q": "Valid Interface method? void bounce();",
			"a": "Yes"
		},
		{
			"q": "Are these all the same? void bounce(); public void bounce(); abstract void bounce(); public abstract void bounce(); abstract public void bounce();",
			"a": "Yes"
		},
		{
			"q": "Compiles? final void bounce();",
			"a": "False, final and abstract can never be used"
		},
		{
			"q": "Compiles? private void bounce();",
			"a": "False, interface methods are always public"
		},
		{
			"q": "Compiles? protected void bounce()",
			"a": "False, interface methods are always public"
		},
		{
			"q": "T/F Interface methods are always public?",
			"a": "True"
		},
		{
			"q": "Interface Constants Are implied public static final?",
			"a": "True, you don't have to put them they are implied. public int, static int, final int, or any other combination are the same as regular int = blah."
		},
		{
			"q": "Interface constants must be public static final?",
			"a": "True, they are ALWAYS even when implied, to be public, static, and final"
		},
		{
			"q": "T/F The default keyword can be used ONLY with interface method signatures not class method signatures?",
			"a": "True"
		},
		{
			"q": "T/F default methods are public by definition, the public modifier is optional",
			"a": "True"
		},
		{
			"q": "T/F Default methods can not be marked private, protected, static, final, or abstract",
			"a": "True"
		},
		{
			"q": "T/F Default methods MUST have a concrete method body",
			"a": "True"
		},
		{
			"q": "Valid default method? default void m4();",
			"a": "False, it doesn't have a concrete method body"
		},
		{
			"q": "Valid default method? static default void m3(){;}",
			"a": "False, default methods can not be static"
		},
		{
			"q": "Valid default method? public default void m2(){;}",
			"a": "True"
		},
		{
			"q": "Valid default method? default int m1(){return 1;}",
			"a": "True, here the default implies public"
		},
		{
			"q": "T/F Java 8 allows static interface methods?",
			"a": "True; and they are implied public"
=======
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
>>>>>>> 722b9c642a81a005ff2dc53a87bc205971dca255
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		},
		{
			"question": "",
			"answer": ""
		}
	]
}